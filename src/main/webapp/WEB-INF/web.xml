<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd" id="WebApp_ID" version="5.0">
  <display-name>JSPStudy</display-name>
  <!-- 특정경로에서실행시 파일명 없는경우 아래에 지정한 파일명을 순서대로 찾아실행한다. 
  만약 지정 파일 없는경우 404에러가 발생한다. -->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>HelloJSP.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
<!-- 해당 프로젝트(웹앱) 전체에서 사용할수있는 컨텍스트 초기화 파라미터(매개변수)로 일종의 상수값이라 생각하면 된다.
프로그램에서 필요한 경우 application 내장객체로 값을 읽을수있다. -->
  <context-param>
  	<param-name>INIT_PARAM</param-name>
  	<param-value>web.xml에 저장한 초기화 매개변수</param-value>
  </context-param>
  <!-- 오라클 접속정ㅂ를 컨텍스트 초기화파라미터로 설정
  해당정보는 application 내장객체로 값읽어올수있다. -->
  <context-param>
  	<param-name>OracleDriver</param-name>
  	<param-value>oracle.jdbc.OracleDriver</param-value>
  </context-param>
  <context-param>
  	<param-name>OracleURL</param-name>
  	<param-value>jdbc:oracle:thin:@localhost:1521:xe</param-value>
  </context-param>
  <context-param>
  	<param-name>OracleId</param-name>
  	<param-value>musthave</param-value>
  </context-param>
  <context-param>
  	<param-name>OraclePw</param-name>
  	<param-value>1234</param-value>
  </context-param>
  
  <context-param>
  	<param-name>POSTS_PER_PAGE</param-name>
  	<param-value>10</param-value>
  </context-param>
  <context-param>
  	<param-name>PAGES_PER_BLOCK</param-name>
  	<param-value>5</param-value>
  </context-param>
  
   <context-param>
  	<param-name>maxPostSize</param-name>
  	<param-value>1024000</param-value>
  </context-param>
  
 <!-- 세션유지시간설정 -->
  <session-config>
   <session-timeout>20</session-timeout>
</session-config>

<!-- 서블릿 매핑하기
웹앱으로 요청들어왔을때 url-pattern 에 지정되었는지 확인하여 일치하면 해당 요청을 servlet-class 에 지정된 
서블릿클래스로 전달한다. 이때 servlet-name 에 지정한 이름을 통해 요청명과 서블릿을 매핑한다.
즉 특정요청 있을때마다 해당요청 전달하기위한 서블릿 클래스를 설정하는 것을 매핑이라고한다

요청명은 컨텍스트루트 제외한 / 로 시작하는 경로명으로 설정해야한다
그렇지않으면 url-pattern을 인식하지못해 톰캣이구동되지않는다 -->
<servlet>
	<servlet-name>HelloServlet</servlet-name>
	<servlet-class>servlet.HelloServlet</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>HelloServlet</servlet-name>
	<url-pattern>/12Servlet/HelloServlet.do</url-pattern>
</servlet-mapping>
	
<!-- 서블릿 매핑2 : 서블릿에서 즉시 요청에 대한 결과를 출력한다. jsp로 포워드하지 않는다. -->
<servlet>
	<servlet-name>DirectServletPrint</servlet-name>
	<servlet-class>servlet.DirectServletPrint</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>DirectServletPrint</servlet-name>
	<url-pattern>/12Servlet/DirectServletPrint.do</url-pattern>
</servlet-mapping>

<!-- 모델2방식의 게시판 리스트 페이지 매핑 -->
<servlet>
	<servlet-name>MVCBoardList</servlet-name>
	<servlet-class>model2.mvcboard.ListController</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>MVCBoardList</servlet-name>
	<url-pattern>/mvcboard/list.do</url-pattern>
</servlet-mapping>

<!-- 글쓰기 페이지 매핑 -->
<servlet>
	<servlet-name>MVCBoardWrite</servlet-name>
	<servlet-class>model2.mvcboard.WriteController</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>MVCBoardWrite</servlet-name>
	<url-pattern>/mvcboard/write.do</url-pattern>
</servlet-mapping>

<!-- mvc 패턴으로 회원인증하기위한 서블릿 매핑 -->
<servlet>
	<servlet-name>MemberAuth</servlet-name>
	<servlet-class>servlet.MemberAuth</servlet-class>

<!-- 해당 서블릿 내에서만 사용할수있는 초기화 파라미터
context-param 으로 정의하는 컨텍스트 초기화 파라미터의 경우 웹앱 전체에서 사용가능한 전역상수라면, 
해당 파라미터는 지역상수라고 할수있다. -->
	<init-param>
		<param-name>admin_id</param-name>
		<param-value>nakja</param-value>
	</init-param>
</servlet>
<servlet-mapping>
	<servlet-name>MemberAuth</servlet-name>
	<url-pattern>/12Servlet/MemberAuth.mvc</url-pattern>
</servlet-mapping>


<!-- 한글깨짐에 대한 필터설정 : 현재개발중인 웹앱 전체에 필터정용. 웹앱으로 들어오는
모든 요청에 대해 문자인코딩을 utf-9로 처리. tomcat 10.1 이전버전에서는 post로 전송시
한글깨짐현상이 발생하므로 필터설정이 꼭필요하다 -->
<filter>
  <filter-name>SetCharEncoding</filter-name>
  <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
</filter>
<filter-mapping>
  <filter-name>SetCharEncoding</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>
  
<!-- 웹앱에서 에러발생시 처리할페이지를 지정. 
404 : Not found. 페이지찻을수없을때발생
405 : Method not allowed. get/post 방식으로 전송시 해당요청을 처리할메소드가 없을때 발생 
500 : Internal server error. 서버 내부 오류로 오타가있거나 로직에 문제가 있어 웹서버가 요청을 처리할수없을때 발생 
에러페이지처리는 실제 개발시 커스터마이징할수있도록 주석처리
-->
 <!--  <error-page>
  <error-code>404</error-code>
  <location>/02ImplicitObject/Exception.jsp</location>
  </error-page>
  <error-page>
  <error-code>405</error-code>
  <location>/02ImplicitObject/Exception.jsp</location>
  </error-page>
  <error-page>
  <error-code>500</error-code>
  <location>/02ImplicitObject/Exception.jsp</location>
  </error-page> -->
  
</web-app>